from aiogram.filters import CommandStart
from aiogram import F, types, Router
from aiogram.types import Message
from states import Wait
from aiogram.fsm.context import FSMContext
from functions import *
from kb import *
import time

router = Router()

users_dict = {}


@router.message(CommandStart())
async def hello_mes(msg: Message):
    user_id = msg.chat.id
    users_dict[user_id] = []
    buttons = InlineKeyboardMarkup(inline_keyboard=main_menu)
    await msg.answer("–ü—Ä–∏–≤–µ—Ç—Å–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ, –≤—ã–±–µ—Ä–µ—Ç–µ –æ–¥–∏–Ω –∏–∑ —É–Ω–∫—Ç–æ–≤ –º–µ–Ω—é üëá", reply_markup=buttons)


@router.callback_query(F.data == "instruction")
async def get_instruction(call: CallbackQuery):
    buttons = InlineKeyboardMarkup(inline_keyboard=back_to_menu)
    await call.message.answer("–ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –∫ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—é\n–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é üëá", reply_markup=buttons)


@router.callback_query(F.data == "rasch")
async def weight_inp(call: CallbackQuery, state: FSMContext):
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –ø–∞—Ü–∏–µ–Ω—Ç–∞ —á–∏—Å–ª–æ–º (–ï—Å–ª–∏ —á–∏—Å–ª–æ –Ω–µ —Ü–µ–ª–æ–µ –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ —Å –ø–æ–º–æ—â—å—é ' . ')")
    await state.set_state(Wait.wait_weight)


@router.message(F.text, Wait.wait_weight)
async def weight(msg: Message):
    user_id = msg.chat.id
    mes = msg.text
    buttons = InlineKeyboardMarkup(inline_keyboard=dozes)
    if mes.isdigit():
        users_dict[user_id] = int(mes)
        await msg.answer("–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–µ—Ç–µ –¥–æ–∑–∏—Ä–æ–≤–∫—É –ø—Ä–µ–ø–æ—Ä–∞—Ç–∞ üßë‚Äçüî¨", reply_markup=buttons)
    elif is_float(mes):
        users_dict[user_id] = float(mes)
        await msg.answer("–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–µ—Ç–µ –¥–æ–∑–∏—Ä–æ–≤–∫—É –ø—Ä–µ–ø–æ—Ä–∞—Ç–∞ üßë‚Äçüî¨", reply_markup=buttons)
    else:
        back_to_menu_1 = InlineKeyboardMarkup(inline_keyboard=back_to_menu)
        await msg.answer('–í—ã –≤–≤–µ–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö, –≤–≤–µ–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –º–µ–Ω—é',
                         reply_markup=back_to_menu_1)


@router.callback_query(F.data == "0.4")
async def doze_1(call: CallbackQuery):
    user_id = call.message.chat.id
    buttons = InlineKeyboardMarkup(inline_keyboard=back_to_menu)
    try:
        ans = create_answer_04(users_dict[user_id], 0.4)
        await call.message.answer(
            f'–ù–∞ –≤–µ—Å –ø–∞—Ü–∏–µ–Ω—Ç–∞: <b>{users_dict[user_id]} –∫–≥</b>\n–° –¥–æ–∑–∏—Ä–æ–≤–∫–æ–π: <b>0.4 –º–≥/–∫–≥</b>\n–ü—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è: <b>{ans[0]}</b>\n–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ª–µ—á–µ–Ω–∏—è: <b>{ans[1]}</b>',
            parse_mode='HTML')
        time.sleep(4)
        await call.message.answer("–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤–≤–µ–¥–∏—Ç–µ –≤–µ—Å –ø–∞—Ü–∏–µ–Ω—Ç–∞ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é", reply_markup=buttons)
    except:
        await call.message.answer("–£–ø—Å, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –≤–µ—Å –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é",reply_markup=buttons)


@router.callback_query(F.data == "0.6")
async def doze_2(call: CallbackQuery):
    user_id = call.message.chat.id
    buttons = InlineKeyboardMarkup(inline_keyboard=back_to_menu)
    try:
        ans = create_answer_04(users_dict[user_id], 0.6)
        await call.message.answer(
            f'–ù–∞ –≤–µ—Å –ø–∞—Ü–∏–µ–Ω—Ç–∞: <b>{users_dict[user_id]} –∫–≥</b>\n–° –¥–æ–∑–∏—Ä–æ–≤–∫–æ–π: <b>0.6 –º–≥/–∫–≥</b>\n–ü—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è: <b>{ans[0]}</b>\n–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ª–µ—á–µ–Ω–∏—è: <b>{ans[1]}</b>',
            parse_mode='HTML')
        time.sleep(4)
        await call.message.answer("–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤–≤–µ–¥–∏—Ç–µ –≤–µ—Å –ø–∞—Ü–∏–µ–Ω—Ç–∞ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é", reply_markup=buttons)
    except:
        await call.message.answer("–£–ø—Å, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –≤–µ—Å –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é", reply_markup=buttons)


@router.callback_query(F.data == "0.8")
async def doze_3(call: CallbackQuery):
    user_id = call.message.chat.id
    buttons = InlineKeyboardMarkup(inline_keyboard=back_to_menu)
    try:
        ans = create_answer_04(users_dict[user_id], 0.8)
        await call.message.answer(
            f'–ù–∞ –≤–µ—Å –ø–∞—Ü–∏–µ–Ω—Ç–∞: <b>{users_dict[user_id]} –∫–≥</b>\n–° –¥–æ–∑–∏—Ä–æ–≤–∫–æ–π: <b>0.8 –º–≥/–∫–≥</b>\n–ü—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è: <b>{ans[0]}</b>\n–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ª–µ—á–µ–Ω–∏—è: <b>{ans[1]}</b>',
            parse_mode='HTML')
        time.sleep(4)
        await call.message.answer("–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤–≤–µ–¥–∏—Ç–µ –≤–µ—Å –ø–∞—Ü–∏–µ–Ω—Ç–∞ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é", reply_markup=buttons)
    except:
        await call.message.answer("–£–ø—Å, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –≤–µ—Å –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é",
                                  reply_markup=buttons)


@router.callback_query(F.data == "menu")
async def menu(call: CallbackQuery, state: FSMContext):
    buttons = InlineKeyboardMarkup(inline_keyboard=main_menu)
    await call.message.answer("–í—ã–±–µ—Ä–µ—Ç–µ –æ–¥–Ω—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π üëá", reply_markup=buttons)
    await state.clear()


@router.message()
async def free_mes(msg: Message):
    buttons = InlineKeyboardMarkup(inline_keyboard=main_menu)
    await msg.answer("–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ –í—ã –æ—Ç –º–µ–Ω—è —Ç—Ä–µ–±—É–µ—Ç–µ üòì, –≤—ã–±–µ—Ä–µ—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –º–µ–Ω—é",
                     reply_markup=buttons)
